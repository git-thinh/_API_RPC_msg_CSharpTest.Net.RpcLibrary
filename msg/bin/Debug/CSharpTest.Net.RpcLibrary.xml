<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpTest.Net.RpcLibrary</name>
    </assembly>
    <members>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcProtseq">
            <summary>
            Defines the various types of protocols that are supported by Win32 RPC
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_nb_tcp">
            <summary>
            Connection-oriented NetBIOS over Transmission Control Protocol (TCP) Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_nb_ipx">
            <summary>
            Connection-oriented NetBIOS over Internet Packet Exchange (IPX) Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_nb_nb">
            <summary>
            Connection-oriented NetBIOS Enhanced User Interface (NetBEUI) Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT, Windows Me, Windows 98, Windows 95
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_ip_tcp">
            <summary>
            Connection-oriented Transmission Control Protocol/Internet Protocol (TCP/IP) Client only: MS-DOS, Windows 3.x, and Apple Macintosh
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT, Windows Me, Windows 98, Windows 95
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_np">
            <summary>
            Connection-oriented named pipes Client only: MS-DOS, Windows 3.x, Windows 95
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_spx">
            <summary>
            Connection-oriented Sequenced Packet Exchange (SPX) Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT, Windows Me, Windows 98, Windows 95
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_dnet_nsp">
            <summary>
            Connection-oriented DECnet transport 
            Client only: MS-DOS, Windows 3.x
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_at_dsp">
            <summary>
            Connection-oriented AppleTalk DSP Client: Apple Macintosh
            Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_vns_spp">
            <summary>
            Connection-oriented Vines scalable parallel processing (SPP) transport Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncadg_ip_udp">
            <summary>
            Datagram (connectionless) User Datagram Protocol/Internet Protocol (UDP/IP) Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncadg_ipx">
            <summary>
            Datagram (connectionless) IPX Client only: MS-DOS, Windows 3.x
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncadg_mq">
            <summary>
            Datagram (connectionless) over the Microsoft Message Queue Server (MSMQ) Client only: Windows Me/98/95
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT Server 4.0 with SP3 and later
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncacn_http">
            <summary>
            Connection-oriented TCP/IP using Microsoft Internet Information Server as HTTP proxy Client only: Windows Me/98/95
            Client and Server: Windows Server 2003, Windows XP, Windows 2000
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtseq.ncalrpc">
            <summary>
            Local procedure call 
            Client and Server: Windows Server 2003, Windows XP, Windows 2000, Windows NT, Windows Me, Windows 98, Windows 95
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcProtoseqType">
            <summary>
            Defines the type of protocol the client is connected with
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtoseqType.TCP">
            <summary> TCP, UDP, IPX over TCP, etc </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtoseqType.NMP">
            <summary> Named Pipes </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtoseqType.LRPC">
            <summary> LPRC / Local RPC </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcProtoseqType.HTTP">
            <summary> HTTP / IIS integrated </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcError">
            <summary> WIN32 RPC Error Codes </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcProtectionLevel">
            <summary>
            The protection level of the communications, RPC_C_PROTECT_LEVEL_PKT_PRIVACY is 
            the default for authenticated communications.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcAuthentication">
            <summary>
            The authentication type to be used for connection, GSS_NEGOTIATE / WINNT
            are the most common.  Be aware that GSS_NEGOTIATE is not available unless
            the machin is a member of a domain that is not running WinNT (or in legacy 
            mode).
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.Interop.UsageCounter.#ctor(System.String,System.Object[])">
            <summary> Creates a composite name with the format and arguments specified </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.Interop.UsageCounter.Increment``1(System.Action{``0},``0)">
            <summary> Delegate fired inside lock if this is the first Increment() call on the name provided </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.Interop.UsageCounter.Decrement(System.Threading.ThreadStart)">
            <summary> Delegate fired inside lock if the Decrement() count reaches zero </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.Interop.RpcApi">
            <summary>
            WinAPI imports for RPC
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.IRpcClientInfo">
            <summary>
            An interface that provide contextual information about the client within an Rpc server call
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.IsClientLocal">
            <summary>
            Returns true if the caller is using LRPC
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ClientAddress">
            <summary>
            Returns a most random set of bytes, undocumented Win32 value.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ProtocolType">
            <summary>
            Defines the type of the procol being used in the communication, unavailable on Windows XP
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ProtectionLevel">
            <summary>
            Returns the packet protection level of the communications
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.AuthenticationLevel">
            <summary>
            Returns the authentication level of the connection
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ClientPid">
            <summary>
            Returns the ProcessId of the LRPC caller, may not be valid on all platforms
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.IsAuthenticated">
            <summary>
            Returns true if the caller has authenticated as a user
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ClientPrincipalName">
            <summary>
            Returns the client user name if authenticated, not available on WinXP
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.ClientUser">
            <summary>
            Returns the identity of the client user or Anonymous if unauthenticated
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.IRpcClientInfo.IsImpersonating">
            <summary>
            Returns true if already impersonating the caller
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.IRpcClientInfo.Impersonate">
            <summary>
            Returns a disposable context that is used to impersonate the calling user
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.Resources.ExceptionStrings">
            <summary>
            Returns the raw exception strings.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.Resources.ExceptionStrings.RpcException">
            <summary>
            Unspecified rpc error
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.Resources.ExceptionStrings.RpcException_String_message_">
            <summary>
            {0}
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcException">
            <summary>
            Exception class: RpcException : System.ComponentModel.Win32Exception
            Unspecified rpc error
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor">
            <summary>
            Unspecified rpc error
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor(System.Exception)">
            <summary>
            Unspecified rpc error
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.Assert(System.Boolean)">
            <summary>
            if(condition == false) throws Unspecified rpc error
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor(System.String)">
            <summary>
            {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor(System.String,System.Exception)">
            <summary>
            {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.Assert(System.Boolean,System.String)">
            <summary>
            if(condition == false) throws {0}
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.#ctor(CSharpTest.Net.RpcLibrary.RpcError)">
            <summary>
            Exception class: RpcException : System.ComponentModel.Win32Exception
            Unspecified rpc error
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.RpcException.RpcError">
            <summary>
            Returns the RPC Error as an enumeration
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcException.Assert(CSharpTest.Net.RpcLibrary.RpcError)">
            <summary>
            Asserts that the argument is set to RpcError.RPC_S_OK or throws a new exception.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcClientApi">
            <summary>
            Provides a connection-based wrapper around the RPC client
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcClientApi.IID">
            <summary> The interface Id the client is connected to </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.#ctor(System.Guid,CSharpTest.Net.RpcLibrary.RpcProtseq,System.String,System.String)">
            <summary>
            Connects to the provided server interface with the given protocol and server:endpoint
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.Dispose">
            <summary>
            Disconnects the client and frees any resources.
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.RpcClientApi.Anonymous">
            <summary>
            Returns a constant NetworkCredential that represents the Anonymous user
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.RpcClientApi.Self">
            <summary>
            Returns a constant NetworkCredential that represents the current Windows user
            </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.RpcClientApi.Protocol">
            <summary>
            The protocol that was provided to the constructor
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.Connect">
            <summary>
            Connects the client; however, this is a soft-connection and validation of 
            the connection will not take place until the first call is attempted.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.AuthenticateAs(System.Net.NetworkCredential)">
            <summary>
            Adds authentication information to the client, use the static Self to
            authenticate as the currently logged on Windows user.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.AuthenticateAs(System.String,System.Net.NetworkCredential)">
            <summary>
            Adds authentication information to the client, use the static Self to
            authenticate as the currently logged on Windows user.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.AuthenticateAs(System.String,System.Net.NetworkCredential,CSharpTest.Net.RpcLibrary.RpcProtectionLevel,CSharpTest.Net.RpcLibrary.RpcAuthentication[])">
            <summary>
            Adds authentication information to the client, use the static Self to
            authenticate as the currently logged on Windows user.  This overload allows
            you to specify the privacy level and authentication types to try. Normally
            these default to RPC_C_PROTECT_LEVEL_PKT_PRIVACY, and both RPC_C_AUTHN_GSS_NEGOTIATE
            or RPC_C_AUTHN_WINNT if that fails.  If credentials is null, or is the Anonymous
            user, RPC_C_PROTECT_LEVEL_DEFAULT and RPC_C_AUTHN_NONE are used instead.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcClientApi.Execute(System.Byte[])">
            <summary>
            Sends a message as an array of bytes and retrieves the response from the server, if
            AuthenticateAs() has not been called, the client will authenticate as Anonymous.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcServerApi">
            <summary>
            Provides server-side services for RPC
            </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcServerApi.MAX_CALL_LIMIT">
            <summary> The max limit of in-flight calls </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcServerApi.DEF_REQ_LIMIT">
            <summary> Use the default request limits </summary>
        </member>
        <member name="F:CSharpTest.Net.RpcLibrary.RpcServerApi.IID">
            <summary> The interface Id the service is using </summary>
        </member>
        <member name="P:CSharpTest.Net.RpcLibrary.RpcServerApi.VerboseLogging">
            <summary>
            Enables verbose logging of the RPC calls to the Trace window
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.#ctor(System.Guid)">
            <summary>
            Constructs an RPC server for the given interface guid, the guid is used to identify multiple rpc
            servers/services within a single process.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.#ctor(System.Guid,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs an RPC server for the given interface guid, the guid is used to identify multiple rpc
            servers/services within a single process.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.Dispose">
            <summary>
            Disposes of the server and stops listening if the server is currently listening
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.AddProtocol(CSharpTest.Net.RpcLibrary.RpcProtseq,System.String,System.Int32)">
            <summary>
            Used to ensure that the server is listening with a specific protocol type.  Once invoked this
            can not be undone, and all RPC servers within the process will be available on that protocol
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.AddAuthentication(CSharpTest.Net.RpcLibrary.RpcAuthentication)">
            <summary>
            Adds a type of authentication sequence that will be allowed for RPC connections to this process.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.AddAuthentication(CSharpTest.Net.RpcLibrary.RpcAuthentication,System.String)">
            <summary>
            Adds a type of authentication sequence that will be allowed for RPC connections to this process.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.StartListening">
            <summary>
            Starts the RPC listener for this instance, if this is the first RPC server instance the process
            starts listening on the registered protocols.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.StopListening">
            <summary>
            Stops listening for this instance, if this is the last instance to stop listening the process
            stops listening on all registered protocols.
            </summary>
        </member>
        <member name="M:CSharpTest.Net.RpcLibrary.RpcServerApi.Execute(CSharpTest.Net.RpcLibrary.IRpcClientInfo,System.Byte[])">
            <summary>
            Can be over-ridden in a derived class to handle the incomming RPC request, or you can
            subscribe to the OnExecute event.
            </summary>
        </member>
        <member name="E:CSharpTest.Net.RpcLibrary.RpcServerApi.OnExecute">
            <summary>
            Allows a single subscription to this event to handle incomming requests rather than 
            deriving from and overriding the Execute call.
            </summary>
        </member>
        <member name="T:CSharpTest.Net.RpcLibrary.RpcServerApi.RpcExecuteHandler">
            <summary>
            The delegate format for the OnExecute event
            </summary>
        </member>
        <member name="T:Check">
            <summary>
            provides a set of runtime validations for inputs
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception and throws.
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="T:Check.ExceptionBuilder">
            <summary>
            Used to delay creation of the excpetion until the condition fails.
            </summary>
        </member>
        <member name="M:Check.Assert(System.Boolean,Check.ExceptionBuilder)">
            <summary>
            Verifies that the condition is true and if it fails throws the execption returned
            by fnExceptionBuilder()
            </summary>
        </member>
        <member name="M:Check.Assert``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Verifies that the condition is true and if it fails constructs the specified type of
            exception with any arguments provided and throws.
            </summary>
        </member>
        <member name="M:Check.NotNull``1(``0)">
            <summary>
            Verifies that value is not null and returns the value or throws ArgumentNullException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.String)">
            <summary>
            Verfies that the string is not null and not empty and returns the string.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty(System.Guid)">
            <summary>
            Verfies that the Guid is not empty.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.NotEmpty``1(``0)">
            <summary>
            Verfies that the collection is not null and not empty and returns the collection.
            throws ArgumentNullException, ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.NotEqual``1(``0,``0)">
            <summary>
            Verifies that the two values are NOT the same
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.ArraySize``1(``0[],System.Int32,System.Int32)">
            <summary>
            Verifies that the array is not empty and has at least min, but not more than max items.
            throws ArgumentNullExcpetion
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.InRange``1(``0,``0,``0)">
            <summary>
            Verifies that the value is min, max, or between the two.
            throws ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:Check.IsAssignable``1(System.Object)">
            <summary>
            Returns (T)value if the object provided can be assinged to a variable of type T
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Object)">
            <summary>
            Returns value if the object provided can be assinged to a variable of type toType
            throws ArgumentException
            </summary>
        </member>
        <member name="M:Check.IsAssignable(System.Type,System.Type)">
            <summary>
            Throws ArgumentException if the type fromType cannot be assigned to variable of type toType
            </summary>
        </member>
    </members>
</doc>
